name: Create Weather Share

on:
  repository_dispatch:
    types: [create-share]

jobs:
  create-share:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Prepare forecast base64
        id: encode-forecast
        env:
          HOURLY_JSON: ${{ toJson(github.event.client_payload.weather.hourly) }}
          DAILY_JSON: ${{ toJson(github.event.client_payload.weather.daily) }}
        run: |
          echo "hourly_b64=$(printf '%s' "$HOURLY_JSON" | base64 -w 0)" >> $GITHUB_ENV
          echo "daily_b64=$(printf '%s' "$DAILY_JSON" | base64 -w 0)" >> $GITHUB_ENV
      - name: Full share build and status
        run: |
          set -e
          handle_error() {
            MSG=$1
            echo "{\"status\":\"error\",\"progress\":0.0,\"message\":\"$MSG\"}" > public/shares/${{ github.event.client_payload.shareId }}/status.json || true
            git add public/shares/${{ github.event.client_payload.shareId }}/status.json || true
            git commit -m "status: error" || true
            git push || true
            exit 1
          }
          trap 'handle_error "Workflow failed at line $LINENO"' ERR

          echo "[DEBUG] Configuring git..."
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          echo "[DEBUG] Creating share directory..."
          mkdir -p public/shares/${{ github.event.client_payload.shareId }}
          touch public/.nojekyll

          echo "[DEBUG] Writing started status..."
          echo '{"status":"started","progress":0.05,"message":"Preparing share..."}' > public/shares/${{ github.event.client_payload.shareId }}/status.json
          git add public/shares/${{ github.event.client_payload.shareId }}/status.json
          git commit -m "status: started" || echo "No changes"
          git push

          echo '[DEBUG] status.json after started:'
          cat public/shares/${{ github.event.client_payload.shareId }}/status.json

          echo "[DEBUG] Writing building status..."
          echo '{"status":"building","progress":0.3,"message":"Building the share page..."}' > public/shares/${{ github.event.client_payload.shareId }}/status.json
          git add public/shares/${{ github.event.client_payload.shareId }}/status.json
          git commit -m "status: building" || echo "No changes"
          git push

          echo '[DEBUG] status.json after building:'
          cat public/shares/${{ github.event.client_payload.shareId }}/status.json

          echo "[DEBUG] Generating index.html..."
          cat > public/shares/${{ github.event.client_payload.shareId }}/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Weather Share - ${{ github.event.client_payload.location }}</title>
            <meta property="og:title" content="Weather in ${{ github.event.client_payload.location }}">
            <meta property="og:description" content="Check out the current weather conditions!">
            <meta property="og:type" content="website">
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
            <style>
              html, body {
                height: 100%;
                margin: 0;
                padding: 0;
              }
              body {
                min-height: 100vh;
                background: linear-gradient(135deg, #b7d8f7 0%, #e0c3fc 100%);
                display: flex;
                align-items: center;
                justify-content: center;
                font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                color: #222;
              }
              .glass-card {
                position: relative;
                max-width: 420px;
                width: 100%;
                margin: 0 auto;
                border-radius: 32px;
                background: rgba(255,255,255,0.22);
                box-shadow: 0 8px 32px 0 rgba(31,38,135,0.18);
                backdrop-filter: blur(22px);
                -webkit-backdrop-filter: blur(22px);
                border: none;
                padding: 38px 28px 28px 28px;
                display: flex;
                flex-direction: column;
                align-items: center;
                transition: box-shadow 0.3s cubic-bezier(.4,0,.2,1);
              }
              .glass-card:hover {
                box-shadow: 0 12px 40px 0 rgba(31,38,135,0.22);
              }
              .weather-icon {
                width: 100px;
                height: 100px;
                margin-bottom: 18px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
                background: rgba(255,255,255,0.18);
                box-shadow: 0 2px 12px 0 rgba(31,38,135,0.10);
                animation: icon-pop 0.7s cubic-bezier(.4,0,.2,1);
              }
              @keyframes icon-pop {
                0% { transform: scale(0.7); opacity: 0; }
                100% { transform: scale(1); opacity: 1; }
              }
              .temperature {
                font-size: 4.2rem;
                font-weight: 700;
                color: #222;
                margin: 0 0 8px 0;
                text-align: center;
                letter-spacing: -2px;
              }
              .condition {
                font-size: 1.5rem;
                font-weight: 600;
                color: #555;
                margin-bottom: 18px;
                text-align: center;
              }
              .details-row {
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                gap: 22px;
                margin-bottom: 18px;
              }
              .detail {
                display: flex;
                flex-direction: column;
                align-items: center;
                min-width: 80px;
                margin-bottom: 6px;
              }
              .detail-label {
                font-size: 0.95rem;
                color: #888;
                font-weight: 500;
                margin-top: 2px;
              }
              .detail-value {
                font-size: 1.18rem;
                font-weight: 600;
                color: #222;
              }
              .sun-row {
                display: flex;
                justify-content: center;
                align-items: center;
                gap: 18px;
                margin-bottom: 10px;
              }
              .sun-label {
                font-size: 0.98rem;
                color: #666;
                font-weight: 500;
              }
              .message {
                margin: 18px 0 10px 0;
                padding: 16px 18px;
                background: rgba(255,255,255,0.18);
                border-radius: 18px;
                font-style: italic;
                font-size: 1.08rem;
                color: #444;
                text-align: center;
                box-shadow: 0 2px 8px 0 rgba(31,38,135,0.07);
                animation: message-appear 0.5s cubic-bezier(.4,0,.2,1) 0.2s both;
              }
              @keyframes message-appear {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
              }
              .location-row {
                margin-top: 18px;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
                font-size: 1.08rem;
                color: #333;
                font-weight: 600;
                letter-spacing: 0.1px;
              }
              .location-icon {
                color: #1e90ff;
                font-size: 1.2em;
                vertical-align: middle;
              }
              @media (max-width: 600px) {
                .glass-card {
                  padding: 22px 6vw 18px 6vw;
                  max-width: 98vw;
                }
                .weather-icon {
                  width: 70px;
                  height: 70px;
                }
                .temperature {
                  font-size: 2.7rem;
                }
                .condition {
                  font-size: 1.1rem;
                }
              }
            </style>
          </head>
          <body>
            <div class="glass-card">
              <div class="weather-icon" id="weather-icon"></div>
              <div class="temperature" id="temp"></div>
              <div class="condition" id="condition"></div>
              <div class="details-row" id="details"></div>
              <div class="sun-row" id="sun"></div>
              <div class="message" id="message" style="display:none;"></div>
              <div class="location-row" id="location-row">
                <svg class="location-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/></svg>
                <span id="location-text"></span>
              </div>
            </div>
            <script>
              // Weather icon
              function getWeatherSVG(condition) {
                switch (condition.toLowerCase()) {
                  case 'clear':
                    return `<svg width="80" height="80" viewBox="0 0 80 80" fill="none"><circle cx="40" cy="40" r="20" fill="#FFD93B"/><g stroke="#FFD93B" stroke-width="4"><line x1="40" y1="8" x2="40" y2="0"/><line x1="40" y1="72" x2="40" y2="80"/><line x1="8" y1="40" x2="0" y2="40"/><line x1="72" y1="40" x2="80" y2="40"/><line x1="14" y1="14" x2="6" y2="6"/><line x1="66" y1="66" x2="74" y2="74"/><line x1="14" y1="66" x2="6" y2="74"/><line x1="66" y1="14" x2="74" y2="6"/></g></svg>`;
                  case 'cloudy':
                  case 'mainly clear':
                    return `<svg width="80" height="80" viewBox="0 0 80 80" fill="none"><ellipse cx="40" cy="50" rx="24" ry="16" fill="#B0C4DE"/><ellipse cx="55" cy="48" rx="12" ry="10" fill="#B0C4DE"/><ellipse cx="30" cy="48" rx="10" ry="8" fill="#B0C4DE"/></svg>`;
                  case 'rain':
                  case 'drizzle':
                    return `<svg width="80" height="80" viewBox="0 0 80 80" fill="none"><ellipse cx="40" cy="50" rx="24" ry="16" fill="#B0C4DE"/><ellipse cx="55" cy="48" rx="12" ry="10" fill="#B0C4DE"/><ellipse cx="30" cy="48" rx="10" ry="8" fill="#B0C4DE"/><line x1="40" y1="60" x2="40" y2="75" stroke="#1e90ff" stroke-width="4" stroke-linecap="round"/></svg>`;
                  case 'snow':
                    return `<svg width="80" height="80" viewBox="0 0 80 80" fill="none"><ellipse cx="40" cy="50" rx="24" ry="16" fill="#E6E6FA"/><ellipse cx="55" cy="48" rx="12" ry="10" fill="#E6E6FA"/><ellipse cx="30" cy="48" rx="10" ry="8" fill="#E6E6FA"/><g stroke="#87ceeb" stroke-width="3"><line x1="40" y1="62" x2="40" y2="75"/><line x1="35" y1="68" x2="45" y2="68"/><line x1="37" y1="64" x2="43" y2="72"/><line x1="43" y1="64" x2="37" y2="72"/></g></svg>`;
                  case 'thunderstorm':
                    return `<svg width="80" height="80" viewBox="0 0 80 80" fill="none"><ellipse cx="40" cy="50" rx="24" ry="16" fill="#778899"/><polygon points="38,60 44,60 40,70" fill="#FFD93B"/><polyline points="40,60 44,66 38,66" fill="none" stroke="#FFD93B" stroke-width="3"/></svg>`;
                  case 'fog':
                    return `<svg width="80" height="80" viewBox="0 0 80 80" fill="none"><ellipse cx="40" cy="50" rx="24" ry="16" fill="#DCDCDC"/><rect x="20" y="68" width="40" height="4" rx="2" fill="#B0C4DE"/><rect x="28" y="74" width="24" height="3" rx="1.5" fill="#B0C4DE"/></svg>`;
                  default:
                    return `<svg width="80" height="80" viewBox="0 0 80 80" fill="none"><circle cx="40" cy="40" r="20" fill="#87ceeb"/></svg>`;
                }
              }
              // Set weather icon
              const condition = "${{ github.event.client_payload.weather.condition }}";
              document.getElementById('weather-icon').innerHTML = getWeatherSVG(condition);
              // Set temperature and condition
              document.getElementById('temp').textContent = "${{ github.event.client_payload.weather.temp }}°";
              document.getElementById('condition').textContent = condition;
              // Details (all as strings from workflow context)
              const details = [];
              details.push({ icon: 'thermostat', label: 'Feels like', value: "${{ github.event.client_payload.weather.feels_like }}°" });
              details.push({ icon: 'water_drop', label: 'Humidity', value: "${{ github.event.client_payload.weather.humidity }}%" });
              details.push({ icon: 'air', label: 'Wind', value: "${{ github.event.client_payload.weather.wind }} km/h" });
              var uv = "${{ github.event.client_payload.weather.uv }}";
              if (uv && uv !== 'null' && uv !== '') details.push({ icon: 'wb_sunny', label: 'UV', value: uv });
              var pressure = "${{ github.event.client_payload.weather.pressure }}";
              if (pressure && pressure !== 'null' && pressure !== '') details.push({ icon: 'speed', label: 'Pressure', value: pressure + ' hPa' });
              var precipProb = "${{ github.event.client_payload.weather.precip_prob }}";
              if (precipProb && precipProb !== 'null' && precipProb !== '') details.push({ icon: 'umbrella', label: 'Rain chance', value: precipProb + '%' });
              var precip = "${{ github.event.client_payload.weather.precip }}";
              if (precip && precip !== 'null' && precip !== '') details.push({ icon: 'grain', label: 'Precip', value: precip + ' mm' });
              document.getElementById('details').innerHTML = details.map(d => `
                <div class="detail">
                  <span class="detail-value">${d.value}</span>
                  <span class="detail-label">${d.label}</span>
                </div>
              `).join('');
              // Sunrise/Sunset
              var sunrise = "${{ github.event.client_payload.weather.sunrise }}";
              var sunset = "${{ github.event.client_payload.weather.sunset }}";
              if (sunrise && sunrise !== 'null' && sunset && sunset !== 'null') {
                document.getElementById('sun').innerHTML = `
                  <span class="sun-label">☀️ Sunrise: ${sunrise.substring(11,16)}</span>
                  <span class="sun-label">🌙 Sunset: ${sunset.substring(11,16)}</span>
                `;
              }
              // Message
              var message = "${{ github.event.client_payload.weather.message }}";
              if (message && message !== 'null' && message.trim() !== '') {
                document.getElementById('message').textContent = message;
                document.getElementById('message').style.display = '';
              }
              // Location
              var loc = "${{ github.event.client_payload.location }}";
              var includeLoc = "${{ github.event.client_payload.includeLocation }}";
              if (!includeLoc || includeLoc === 'false' || !loc || loc.trim() === '' || loc.toLowerCase().includes('unknown')) {
                loc = '';
              }
              document.getElementById('location-text').textContent = loc;

              // --- Hourly Forecast Section ---
              var includeHourly = "${{ github.event.client_payload.includeHourlyForecast }}";
              var hourly = [];
              var hourlyB64 = "${{ env.hourly_b64 }}";
              if (hourlyB64) {
                try { hourly = JSON.parse(atob(hourlyB64)); } catch (e) { hourly = []; }
              }
              if (includeHourly === 'true' && Array.isArray(hourly) && hourly.length > 0) {
                var hourlyHtml = '<div class="hourly-section" style="margin-top:22px"><h3 style="margin-bottom:8px;font-size:1.1em">Hourly Forecast</h3><div style="display:flex;gap:12px;overflow-x:auto;">';
                for (var i = 0; i < Math.min(hourly.length, 7); i++) {
                  var h = hourly[i];
                  hourlyHtml += `<div style='background:rgba(255,255,255,0.18);border-radius:12px;padding:10px 12px;min-width:60px;text-align:center;'>` +
                    `<div style='font-weight:600;'>${h.hour || ''}</div>` +
                    `<div style='font-size:1.1em;'>${h.temp !== undefined ? h.temp + '°' : ''}</div>` +
                    `</div>`;
                }
                hourlyHtml += '</div></div>';
                document.querySelector('.glass-card').insertAdjacentHTML('beforeend', hourlyHtml);
              }

              // --- Daily Forecast Section ---
              var includeDaily = "${{ github.event.client_payload.includeDailyForecast }}";
              var daily = [];
              var dailyB64 = "${{ env.daily_b64 }}";
              if (dailyB64) {
                try { daily = JSON.parse(atob(dailyB64)); } catch (e) { daily = []; }
              }
              if (includeDaily === 'true' && Array.isArray(daily) && daily.length > 0) {
                var dailyHtml = '<div class="daily-section" style="margin-top:22px"><h3 style="margin-bottom:8px;font-size:1.1em">5-Day Forecast</h3><div style="display:flex;gap:12px;overflow-x:auto;">';
                for (var i = 0; i < Math.min(daily.length, 5); i++) {
                  var d = daily[i];
                  dailyHtml += `<div style='background:rgba(255,255,255,0.18);border-radius:12px;padding:10px 12px;min-width:70px;text-align:center;'>` +
                    `<div style='font-weight:600;'>${d.day || ''}</div>` +
                    `<div style='font-size:1.1em;'>${d.max !== undefined ? '↑' + d.max + '°' : ''}</div>` +
                    `<div style='font-size:1.1em;'>${d.min !== undefined ? '↓' + d.min + '°' : ''}</div>` +
                    `</div>`;
                }
                dailyHtml += '</div></div>';
                document.querySelector('.glass-card').insertAdjacentHTML('beforeend', dailyHtml);
              }
            </script>
          </body>
          </html>
          EOL

          echo "[DEBUG] Writing generating status..."
          echo '{"status":"generating","progress":0.6,"message":"Generating HTML and assets..."}' > public/shares/${{ github.event.client_payload.shareId }}/status.json
          git add public/shares/${{ github.event.client_payload.shareId }}/status.json
          git commit -m "status: generating" || echo "No changes"
          git push

          echo '[DEBUG] status.json after generating:'
          cat public/shares/${{ github.event.client_payload.shareId }}/status.json

          echo "[DEBUG] Writing deploying status..."
          echo '{"status":"deploying","progress":0.85,"message":"Deploying to GitHub Pages..."}' > public/shares/${{ github.event.client_payload.shareId }}/status.json
          git add public/shares/${{ github.event.client_payload.shareId }}/status.json
          git commit -m "status: deploying" || echo "No changes"
          git push

          echo '[DEBUG] status.json after deploying:'
          cat public/shares/${{ github.event.client_payload.shareId }}/status.json

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.WEATHER_APP_TOKEN }}
          publish_dir: ./public
          keep_files: true

      - name: Finalize status
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          echo '{"status":"ready","progress":1.0,"message":"Share is ready!"}' > public/shares/${{ github.event.client_payload.shareId }}/status.json
          git add public/shares/${{ github.event.client_payload.shareId }}/status.json
          git commit -m "status: ready" || echo "No changes"
          git push

      - name: Schedule cleanup
        run: |
          echo "This share will be automatically removed after 24 hours" 
